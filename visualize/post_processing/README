POST-PROCESSING CONSISTS OF 2 PARTS:

a) Normalization
b) Pattern Match

A) NORMALIZATION

Once we have the taint trace, we normalize the backtrace for each of the blocks.

1. extract the block number and the block number taint

2. find backtrace for each of the block number taints (use ./visualize/trace.py -b <block_nr_taint_number>)

3. create templates for backtrace by canonicalisation:
 this is done by reducing redundant operations captured during tainting.
	eg. if there are multiple binary operations that evaluate to 0, assign the value 0 instead.
	this is being done in order to bring more symmetry to different backtraces.

4. End result of template generation would be something of the form

	BLOCK DESTINATION
	add something1 something2
	something1 = div something3 something4
	something3 = constant something5
	something4 = constant something6
	something2 = BLOCK SOURCE 
	BLOCK SOURCE

where something* is a label

Relevant Steps 
./normalise.sh /tmp/testfs.py 
[OPTIONAL] ./cleanup_trace.sh <taint.number>
# deletes all backtraces before certain taint number. useful if we want to remove initialization taints
./createTemplate.sh *.back 
# creates templates that have constants replaced by a literal 'C'. all operations are simplified, calculated and templates are generated. Also the destination block number is replaced by a 'C', this is so that similar templates do not appear different while clustering
#it then creates a cksum of each template, and writes these checksums to their respective block number files.

B) CLUSTERING
./cluster.py <block_number_files>
#each block number file has checksum corresponding to its respective template. we perform clustering by merging two block numbers if they have even one common checksum.


C) RESULTS:

for workload.5 (generated by workload script. 5% of filesystem is full, after creating 3 files and 3 directories)

1
192
193.194.195.196.197.198.199.200.201.202.203.204.205.206.207.208.209.210.211.212.213.214.215.216.217.218.219.220.221.222.223.224.225.226.227.228.229.230.231.232.233.234
2
4.5.6
64
65.66.67
